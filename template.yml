AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >
  Step function hello world with SAM!
Globals:
  Function:
    Runtime: "nodejs8.10"
    Environment:
      Variables:
        DYNAMODB_TABLE: !Join [-, [DDBCaseSample, !Ref Stage]]

Parameters:
  Stage:
    Type: String
    Default: Dev
    Description: Stage or environment designator used to discriminate the resources instantiated for a specific stack

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: AccessDDB
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt DDBState.Arn


  Step1:
    Type: AWS::Serverless::Function
    Properties:
      Handler: process.step1
      CodeUri: src/package.zip
      Role: !GetAtt [ LambdaExecutionRole, Arn ]

  fooStep:
    Type: AWS::Serverless::Function
    Properties:
      Handler: process.fooStep
      CodeUri: src/package.zip
      Role: !GetAtt [ LambdaExecutionRole, Arn ]

  barStep:
    Type: AWS::Serverless::Function
    Properties:
      Handler: process.barStep
      CodeUri: src/package.zip
      Role: !GetAtt [ LambdaExecutionRole, Arn ]

  bazStep:
    Type: AWS::Serverless::Function
    Properties:
      Handler: process.bazStep
      CodeUri: src/package.zip
      Role: !GetAtt [ LambdaExecutionRole, Arn ]

  quuxStep:
    Type: AWS::Serverless::Function
    Properties:
      Handler: process.quuxStep
      CodeUri: src/package.zip
      Role: !GetAtt [ LambdaExecutionRole, Arn ]

  StatesExecutionRole:
    Type: AWS::IAM::Role
    DependsOn:
      - Step1
      - fooStep
      - barStep
      - bazStep
      - quuxStep
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt [ Step1, Arn ]
                  - !GetAtt [ fooStep, Arn ]
                  - !GetAtt [ barStep, Arn ]
                  - !GetAtt [ bazStep, Arn ]
                  - !GetAtt [ quuxStep, Arn ]

  Process1:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Join [-, [DDBCaseSample, !Ref "Stage"]]
      DefinitionString: !Sub |
        {
          "Comment":"Sample state machine to show case data vs flow data",
          "StartAt":"step-1",
          "States": {
            "step-1": {
              "Type":"Task",
              "Resource":"${Step1.Arn}",
              "Next":"choiceStep"
            },
            "choiceStep": {
              "Type":"Choice",
              "Choices":[
                {
                  "Variable":"$.metavar",
                  "StringEquals": "foo",
                  "Next":"fooStep"
                },
                {
                  "Variable":"$.metavar",
                  "StringEquals": "bar",
                  "Next":"barStep"
                }
              ],
              "Default":"bazStep"
            },
            "fooStep": {
              "Type":"Task",
              "Resource":"${fooStep.Arn}",
              "Next":"quux"
            },
            "barStep": {
              "Type":"Task",
              "Resource":"${barStep.Arn}",
              "Next":"quux"
            },
            "bazStep": {
              "Type":"Task",
              "Resource":"${bazStep.Arn}",
              "Next":"quux"
            },
            "quux": {
              "Type":"Task",
              "Resource":"${quuxStep.Arn}",
              "End":true
            }
          }
        }
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]

  Start:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join [-, [StartDDBCaseSample, !Ref "Stage"]]
      Handler: start.start
      CodeUri: src/package.zip
      Role: !GetAtt [ StartExecutionRole, Arn ]
      Environment:
        Variables:
          STEP_FUNCTION_ARN: !Ref Process1
      Events:
        StartEvent:
          Type: Api
          Properties:
            Path: /start
            Method: post

  DDBState:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Delete
    Properties:
      AttributeDefinitions:
        -
          AttributeName: TxnId
          AttributeType: S
      KeySchema:
        -
          AttributeName: TxnId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: !Join [-, [DDBCaseSample, !Ref Stage]]

  StartExecutionRole:
    Type: AWS::IAM::Role
    DependsOn:
      - Process1
      - DDBState
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: CreateExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                Resource:
                  - !Ref Process1
        - PolicyName: AccessDDB
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt DDBState.Arn
        - PolicyName: AllKidsLoveLog
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Resource:
                  - "arn:aws:logs:*:*:*"